import os
import psutil
import webbrowser
import tempfile
import sounddevice as sd
import numpy as np
import wavio
import mouse
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from PIL import ImageGrab
from pygetwindow import getWindowsWithTitle
from aiogram import filters

API_TOKEN = '–≤–æ—Ç —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

recording = False

EMOJIS = {
    "SCREENSHOT": "üì∏",
    "WEBCAM": "üé•",
    "CPU": "üíª",
    "PROCESS": "üîÑ",
    "MIC": "üé§",
    "POWER": "‚ö°",
    "APP": "üì≤",
    "SPOTIFY": "üéµ",
    "DISCORD": "üí¨",
    "CHROME": "üåê",
    "BACK": "üîô",
    "VIDEO": "üì∫",
    "MOUSE": "üñ±Ô∏è",
}

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é {EMOJIS['MOUSE']}",
        f"–ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç {EMOJIS['SCREENSHOT']}",
        f"–ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –≤–µ–±–∫–∞–º–µ—Ä—ã {EMOJIS['WEBCAM']}",
        f"–°–≤–µ–¥–µ–Ω–∏—è –æ –Ω–∞–≥—Ä—É–∑–∫–µ {EMOJIS['CPU']}",
        f"–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö {EMOJIS['PROCESS']}",
        f"–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {EMOJIS['PROCESS']}",
        f"–ó–∞–ø–∏—Å–∞—Ç—å –∑–≤—É–∫ {EMOJIS['MIC']}",
        f"–í—ã–∫–ª—é—á–∏—Ç—å {EMOJIS['POWER']}",
        f"–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É {EMOJIS['APP']}",
        f"–í–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ {EMOJIS['VIDEO']}",
    )
    await message.answer('–ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω', reply_markup=markup)

@dp.message_handler(filters.Regexp('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é ' + EMOJIS['MOUSE']))
async def handle_mouse_control(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚Üë –í–≤–µ—Ä—Ö", "‚¨ÖÔ∏è –í–ª–µ–≤–æ", "‚û°Ô∏è –í–ø—Ä–∞–≤–æ")
    markup.row("‚¨áÔ∏è –í–Ω–∏–∑", "üñ± –ö–ª–∏–∫", "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

@dp.message_handler(filters.Regexp('üñ± –ö–ª–∏–∫'))
async def handle_mouse_click(message: types.Message):
    mouse.click()
    await message.answer('–ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω.')

@dp.message_handler(filters.Regexp('‚¨ÖÔ∏è –í–ª–µ–≤–æ'))
async def handle_mouse_move_left(message: types.Message):
    mouse.move(-50, 0, absolute=False, duration=0.2)
    await message.answer('–ú—ã—à—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–ª–µ–≤–æ.')

@dp.message_handler(filters.Regexp('‚Üë –í–≤–µ—Ä—Ö'))
async def handle_mouse_move_up(message: types.Message):
    mouse.move(0, -50, absolute=False, duration=0.2)
    await message.answer('–ú—ã—à—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–≤–µ—Ä—Ö.')

@dp.message_handler(filters.Regexp('‚¨áÔ∏è –í–Ω–∏–∑'))
async def handle_mouse_move_down(message: types.Message):
    mouse.move(0, 50, absolute=False, duration=0.2)
    await message.answer('–ú—ã—à—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–Ω–∏–∑.')

@dp.message_handler(filters.Regexp('‚û°Ô∏è –í–ø—Ä–∞–≤–æ'))
async def handle_mouse_move_right(message: types.Message):
    mouse.move(50, 0, absolute=False, duration=0.2)
    await message.answer('–ú—ã—à—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–ø—Ä–∞–≤–æ.')

@dp.message_handler(filters.Regexp('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def return_to_main_menu(message: types.Message):
    await send_welcome(message)

@dp.message_handler(filters.Regexp('–ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç ' + EMOJIS['SCREENSHOT']))
async def get_screenshot(message: types.Message):
    path = tempfile.gettempdir() + '/screenshot.png'
    screenshot = ImageGrab.grab()
    screenshot.save(path, 'PNG')
    await message.answer_photo(open(path, 'rb'))

@dp.message_handler(filters.Regexp('–ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –≤–µ–±–∫–∞–º–µ—Ä—ã ' + EMOJIS['WEBCAM']))
async def get_webcam_screenshot(message: types.Message):
    camera_window = getWindowsWithTitle("Camera Preview")
    if camera_window:
        camera_window[0].activate()
        screenshot = ImageGrab.grab(bbox=camera_window[0]._rect)
        path = tempfile.gettempdir() + '/webcam_screenshot.png'
        screenshot.save(path, 'PNG')
        await message.answer_photo(open(path, 'rb'))
    else:
        await message.answer('–ù–∞ –¥–∞–Ω–Ω–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ–±–∫–∞–º–µ—Ä–∞')

@dp.message_handler(filters.Regexp('–°–≤–µ–¥–µ–Ω–∏—è –æ –Ω–∞–≥—Ä—É–∑–∫–µ ' + EMOJIS['CPU']))
async def get_system_load_info(message: types.Message):
    cpu_percent = psutil.cpu_percent()
    memory = psutil.virtual_memory()
    memory_total = round(memory.total / (1024**3), 2)
    memory_used = round(memory.used / (1024**3), 2)
    memory_percent = memory.percent
    load_info = f"{EMOJIS['CPU']} CPU {cpu_percent}%\n–ü–∞–º—è—Ç—å: {memory_used} –ì–ë / {memory_total} –ì–ë ({memory_percent}%)"
    
    top_processes = sorted(psutil.process_iter(['pid', 'name', 'cpu_percent']), key=lambda x: x.info['cpu_percent'], reverse=True)[:5]
    processes_info = "\n".join([f"PID: {proc.info['pid']}, –ò–º—è: {proc.info['name']}, CPU: {proc.info['cpu_percent']}%" for proc in top_processes])
    
    await message.answer(f"{load_info}\n\n–°–∞–º—ã–µ –Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n{processes_info}")

@dp.message_handler(filters.Regexp('–ó–∞–ø–∏—Å–∞—Ç—å –∑–≤—É–∫ ' + EMOJIS['MIC']))
async def start_recording(message: types.Message):
    global recording
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å {EMOJIS['MIC']}")
    await message.answer('–ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å...', reply_markup=markup)
    recording = True

@dp.message_handler(filters.Regexp('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å ' + EMOJIS['MIC']))
async def send_audio(message: types.Message):
    global recording
    if recording:
        await message.answer('–ó–∞–∫–∞–Ω—á–∏–≤–∞—é –∑–∞–ø–∏—Å—å...')
        path = tempfile.gettempdir() + '/audio.wav'
        duration = 5
        fs = 44100
        recording_data = sd.rec(int(fs * duration), samplerate=fs, channels=1, dtype=np.int16)
        sd.wait()
        wavio.write(path, recording_data, fs, sampwidth=2)
        await message.answer_audio(open(path, 'rb'))
        os.remove(path)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(f"–ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç {EMOJIS['SCREENSHOT']}")
        await message.answer('–ó–∞–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', reply_markup=markup)
        recording = False
    else:
        await message.answer('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏.')

@dp.message_handler(filters.Regexp('–í—ã–∫–ª—é—á–∏—Ç—å ' + EMOJIS['POWER']))
async def shutdown_with_countdown(message: types.Message):
    await message.answer('–í—ã–∫–ª—é—á–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä...')
    os.system('shutdown /s /t 1')

@dp.message_handler(filters.Regexp('–í–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ ' + EMOJIS['VIDEO']))
async def play_video(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ:')
    await dp.current_state(user=message.from_user.id).set_data({'next_action': 'open_video'})

@dp.message_handler(lambda message: 'next_action' in dp.current_state(user=message.from_user.id).get_data() and dp.current_state(user=message.from_user.id).get_data()['next_action'] == 'open_video')
async def open_video(message: types.Message):
    url = message.text
    webbrowser.open(url)
    await message.answer('–í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ.')

@dp.message_handler(filters.Regexp('–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ' + EMOJIS['PROCESS']))
async def terminate_process(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:')
    await dp.current_state(user=message.from_user.id).set_data({'next_action': 'confirm_termination'})

@dp.message_handler(lambda message: 'next_action' in dp.current_state(user=message.from_user.id).get_data() and dp.current_state(user=message.from_user.id).get_data()['next_action'] == 'confirm_termination')
async def confirm_termination(message: types.Message):
    try:
        process_number = int(message.text)
        processes = psutil.process_iter(['pid', 'name'])
        for proc in processes:
            if proc.info['pid'] == process_number:
                process_name = proc.info['name']
                proc.terminate()
                await message.answer(f'–ü—Ä–æ—Ü–µ—Å—Å "{process_name}" –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω.')
                return
        await message.answer('–ü—Ä–æ—Ü–µ—Å—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    except ValueError:
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
